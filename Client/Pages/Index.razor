@page "/"
@using PalabrasApp.Shared
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Nav

    <div class="main_content">
        <h1>Palabras</h1><a @onclick="RefreshWord">&#x21BB;</a>

        @*Once styling complete change palabrasList back to allPalabras in two places below.*@
        @if (allPalabras == null)
        {
            <h5>It's on its way...</h5>
        }
        else
        {
            <div class="main_spanish_content row">
                <RandomWord palabra="@palabra" isCorrectSymbol="@refreshCorrectSymbol"></RandomWord>
            </div>
        }


        <div class="row">
            <div class="col-sm-1">
                <a href="/.auth/login/google" class="btn btn-scnd">Add word</a>
            </div>
            @if (allPalabras != null)
            {
                <div class="col-sm-2">
                    <button @onclick="ShowWordsList" class="btn btn-scnd">Todos las palabras</button>
                </div>
            }
        </div>

        @if (isLoggedIn == false)
        {
            <h2>Not logged in</h2>
        }
        else
        {
            <div class="form_block">
                <EditForm Model="@newPalabra" OnValidSubmit="@AddPalabra">
                    <DataAnnotationsValidator />
                    <label>Spanish</label>
                    <InputText id="spanishWord" @bind-Value="newPalabra.SpanishWord" />
                    <br />
                    <label>English</label>
                    <InputText id="englishWord" @bind-Value="newPalabra.EnglishWord" />

                    <button class="btn-primary" type="submit">Save</button>
                </EditForm>
            </div>
        }

        @if (showWordsList && allPalabras != null)
        {
            <WordsList palabras="@palabrasList"></WordsList>
        }

        @if (showError)
        {
            <span id="httpErrorComponent">@errorText</span>
            <a href="/.auth/login/google" class="btn btn-secondary">
                Add word
            </a>

        }

    </div>

<div>
    <a href="/.auth/logout" class="btn btn-secondary">Logout</a>
</div>


@code {

    //Testing variables
   // private List<Palabra> palabrasList = new List<Palabra>();
    private IEnumerable<Palabra> allPalabras;
    private List<Palabra> palabrasList = new List<Palabra>();
    private Palabra palabra;
    private Palabra newPalabra = new Palabra();
    private string refreshCorrectSymbol;


    //Change this back to false when testing complete.
    private bool isLoggedIn = false;
    private string ili;
    private bool showError = false;
    private string errorText;
    private bool showWordsList = false;


    protected override async Task OnInitializedAsync()
    {
        /*palabra = new Palabra
        {
            SpanishWord = "Pollo",
            EnglishWord = "Chicken"
        };

        palabrasList.Add(new Palabra()
        {
            SpanishWord = "Perro",
            EnglishWord = "Dog"
        });
        palabrasList.Add(new Palabra()
        {
            SpanishWord = "Gato",
            EnglishWord = "Cat"
        });
        palabrasList.Add(new Palabra()
        {
            SpanishWord = "Oso",
            EnglishWord = "Bear"
        });*/

        try
        {
            allPalabras = await Http.GetFromJsonAsync<IEnumerable<Palabra>>("/api/GetPalabras");

            palabrasList = allPalabras.ToList();
            if(allPalabras != null)
            {
                RandomPalabra();
                refreshCorrectSymbol = "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }


        var data = await Http.GetFromJsonAsync<JsonElement>("/.auth/me");
        var ili = data.GetProperty("clientPrincipal").ToString();

        if (ili != "")
        {
            isLoggedIn = true;
            Console.WriteLine(ili);
        }

    }

    protected async Task AddPalabra()
    {

        try
        {
            await Http.PostAsJsonAsync<Palabra>("/api/AddPalabra", newPalabra);
            Console.WriteLine(newPalabra.SpanishWord + " = " + newPalabra.EnglishWord);
            palabrasList.Add(newPalabra);
            newPalabra = new Palabra();
        }

        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            showError = true;
            errorText = ex.ToString();
        }

    }

    protected void RandomPalabra()
    {
        var palabrasLength = palabrasList.Count();
        Random random = new Random();
        var randomPalabraIndex = random.Next(0, palabrasLength);
        palabra = palabrasList[randomPalabraIndex];
    }

    protected void ShowWordsList()
    {
        showWordsList = !showWordsList;
    }

    protected void RefreshWord ()
    {
        RandomPalabra();
        refreshCorrectSymbol = "refreshed";
    }

}

