@page "/"
@using PalabrasApp.Shared
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Nav


<h1>Palabras</h1>

@if (allPalabras == null)
{
    <h3>It's on its way...</h3>
}
else
{
    <h2>@palabra.SpanishWord = @palabra.EnglishWord</h2>
}

<div>
    <a href="/.auth/login/google">Add word</a>
</div>

@if (isLoggedIn == false)
{
    <h2>Not logged in</h2>
}
else
{
    <EditForm Model="@newPalabra" OnValidSubmit="@AddPalabra">
        <DataAnnotationsValidator />
        <label>Spanish</label>
        <InputText id="spanishWord" @bind-Value="palabra.SpanishWord" />
        <br />
        <label>English</label>
        <InputText id="englishWord" @bind-Value="palabra.EnglishWord" />

        <button type="submit">Save</button>
    </EditForm>
}

@if (showError)
{
    <span id="httpErrorComponent">@errorText</span>
    <div>
        <a href="/.auth/login/google">Add word</a>
    </div>
}

<h2>@ili</h2>

@code {

    private IEnumerable<Palabra> allPalabras;
    private Palabra palabra;
    private Palabra newPalabra = new Palabra();

    private string spanishWord;
    private string englishWord;

    private bool isLoggedIn = false;
    private string ili;
    private bool showError = false;
    private string errorText;


    protected override async Task OnInitializedAsync()
    {

        try
        {
            allPalabras = await Http.GetFromJsonAsync<IEnumerable<Palabra>>("/api/GetPalabras");
            RandomPalabra(allPalabras);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }


        var data = await Http.GetFromJsonAsync<JsonElement>("/.auth/me");
        var ili = data.GetProperty("clientPrincipal").ToString();

        if (ili != "")
        {
            isLoggedIn = true;
            Console.WriteLine(ili);
        }

    }

    protected async Task AddPalabra()
    {

        try
        {
            await Http.PostAsJsonAsync<Palabra>("/api/AddPalabra", newPalabra);
            Console.WriteLine(newPalabra.SpanishWord + " = " + newPalabra.EnglishWord);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            showError = true;
            errorText = ex.ToString();
        }

    }

    protected Palabra RandomPalabra(IEnumerable<Palabra> palabras)
    {
        var palabrasList = palabras.ToList();
        var palabrasLength = palabrasList.Count();
        Random random = new Random();
        var randomPalabraIndex = random.Next(0, palabrasLength);
        palabra = palabrasList[randomPalabraIndex];
        return palabra;
    }

}

